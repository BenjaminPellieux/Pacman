==994== Memcheck, a memory error detector
==994== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==994== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==994== Command: ./resultat
==994== Parent PID: 9
==994== 
==994== error calling PR_SET_PTRACER, vgdb might block
==995== Warning: invalid file descriptor 1024 in syscall close()
==995== error calling PR_SET_PTRACER, vgdb might block
==995== 
==995== HEAP SUMMARY:
==995==     in use at exit: 760,935 bytes in 1,002 blocks
==995==   total heap usage: 13,912 allocs, 12,910 frees, 3,085,830 bytes allocated
==995== 
==995== LEAK SUMMARY:
==995==    definitely lost: 16 bytes in 1 blocks
==995==    indirectly lost: 176 bytes in 4 blocks
==995==      possibly lost: 0 bytes in 0 blocks
==995==    still reachable: 760,743 bytes in 997 blocks
==995==         suppressed: 0 bytes in 0 blocks
==995== Rerun with --leak-check=full to see details of leaked memory
==995== 
==995== For counts of detected and suppressed errors, rerun with: -v
==995== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==994== Conditional jump or move depends on uninitialised value(s)
==994==    at 0x4E749C7: ??? (in /usr/lib/x86_64-linux-gnu/libSDL-1.2.so.0.11.4)
==994==    by 0x4E7518E: ??? (in /usr/lib/x86_64-linux-gnu/libSDL-1.2.so.0.11.4)
==994==    by 0x4E7591A: ??? (in /usr/lib/x86_64-linux-gnu/libSDL-1.2.so.0.11.4)
==994==    by 0x4E4C27B: SDL_PumpEvents (in /usr/lib/x86_64-linux-gnu/libSDL-1.2.so.0.11.4)
==994==    by 0x4E4C2B8: SDL_PollEvent (in /usr/lib/x86_64-linux-gnu/libSDL-1.2.so.0.11.4)
==994==    by 0x111CC3: traiter_evenements (in /mnt/d/Cours/Prog/Pacman/resultat)
==994==    by 0x10DA49: main (main.c:62)
==994== 
==994== Invalid read of size 4
==994==    at 0x10EF73: determiner_direction (fantome.c:240)
==994==    by 0x10EB51: bouger_fantomes (fantome.c:158)
==994==    by 0x10B2F2: actualiser_partie (partie.c:252)
==994==    by 0x10DAD2: actualiser_jeu (main.c:78)
==994==    by 0x10DA62: main (main.c:63)
==994==  Address 0x1ffeff6b00 is on thread 1's stack
==994==  15968 bytes below stack pointer
==994== 
==994== Invalid read of size 4
==994==    at 0x10EF8D: determiner_direction (fantome.c:243)
==994==    by 0x10EB51: bouger_fantomes (fantome.c:158)
==994==    by 0x10B2F2: actualiser_partie (partie.c:252)
==994==    by 0x10DAD2: actualiser_jeu (main.c:78)
==994==    by 0x10DA62: main (main.c:63)
==994==  Address 0x1ffeff6b00 is on thread 1's stack
==994==  15968 bytes below stack pointer
==994== 
==994== Invalid read of size 4
==994==    at 0x10EFA7: determiner_direction (fantome.c:246)
==994==    by 0x10EB51: bouger_fantomes (fantome.c:158)
==994==    by 0x10B2F2: actualiser_partie (partie.c:252)
==994==    by 0x10DAD2: actualiser_jeu (main.c:78)
==994==    by 0x10DA62: main (main.c:63)
==994==  Address 0x1ffeff6b04 is on thread 1's stack
==994==  15964 bytes below stack pointer
==994== 
==994== Invalid read of size 4
==994==    at 0x10EFC2: determiner_direction (fantome.c:249)
==994==    by 0x10EB51: bouger_fantomes (fantome.c:158)
==994==    by 0x10B2F2: actualiser_partie (partie.c:252)
==994==    by 0x10DAD2: actualiser_jeu (main.c:78)
==994==    by 0x10DA62: main (main.c:63)
==994==  Address 0x1ffeff6b04 is on thread 1's stack
==994==  15964 bytes below stack pointer
==994== 
==994== 
==994== HEAP SUMMARY:
==994==     in use at exit: 107,103,276 bytes in 30,825 blocks
==994==   total heap usage: 60,344 allocs, 29,519 frees, 113,760,707 bytes allocated
==994== 
==994== LEAK SUMMARY:
==994==    definitely lost: 335,736 bytes in 3,816 blocks
==994==    indirectly lost: 55,457,788 bytes in 15,251 blocks
==994==      possibly lost: 292,798 bytes in 1,957 blocks
==994==    still reachable: 51,016,954 bytes in 9,801 blocks
==994==         suppressed: 0 bytes in 0 blocks
==994== Rerun with --leak-check=full to see details of leaked memory
==994== 
==994== For counts of detected and suppressed errors, rerun with: -v
==994== Use --track-origins=yes to see where uninitialised values come from
==994== ERROR SUMMARY: 176 errors from 5 contexts (suppressed: 0 from 0)
